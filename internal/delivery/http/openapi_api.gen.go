// Package scriptumapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package scriptumapi

import (
	"context"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get user jobs
	// (GET /jobs)
	GetJobs(w http.ResponseWriter, r *http.Request)
	// Search jobs
	// (GET /jobs/search)
	GetJobsSearch(w http.ResponseWriter, r *http.Request, params GetJobsSearchParams)
	// Get job result
	// (GET /jobs/{id}/result)
	GetJobsIdResult(w http.ResponseWriter, r *http.Request, id JobId)
	// Get job result
	// (GET /jobs/{id}/result/download)
	GetJobsIdResultDownload(w http.ResponseWriter, r *http.Request, id JobId)
	// Get scripts
	// (GET /scripts)
	GetScripts(w http.ResponseWriter, r *http.Request)
	// Create new script
	// (POST /scripts)
	PostScripts(w http.ResponseWriter, r *http.Request)
	// Search scripts
	// (GET /scripts/search)
	GetScriptsSearch(w http.ResponseWriter, r *http.Request, params GetScriptsSearchParams)
	// Upload script
	// (POST /scripts/upload)
	PostScriptsUpload(w http.ResponseWriter, r *http.Request)
	// Delete script
	// (DELETE /scripts/{id})
	DeleteScriptsId(w http.ResponseWriter, r *http.Request, id ScriptId)
	// Get script by script id
	// (GET /scripts/{id})
	GetScriptsId(w http.ResponseWriter, r *http.Request, id ScriptId)
	// Update script
	// (PUT /scripts/{id})
	PutScriptsId(w http.ResponseWriter, r *http.Request, id ScriptId)
	// Run script
	// (POST /scripts/{id}/start)
	PostScriptsIdStart(w http.ResponseWriter, r *http.Request, id ScriptId)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get user jobs
// (GET /jobs)
func (_ Unimplemented) GetJobs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search jobs
// (GET /jobs/search)
func (_ Unimplemented) GetJobsSearch(w http.ResponseWriter, r *http.Request, params GetJobsSearchParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get job result
// (GET /jobs/{id}/result)
func (_ Unimplemented) GetJobsIdResult(w http.ResponseWriter, r *http.Request, id JobId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get job result
// (GET /jobs/{id}/result/download)
func (_ Unimplemented) GetJobsIdResultDownload(w http.ResponseWriter, r *http.Request, id JobId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get scripts
// (GET /scripts)
func (_ Unimplemented) GetScripts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create new script
// (POST /scripts)
func (_ Unimplemented) PostScripts(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Search scripts
// (GET /scripts/search)
func (_ Unimplemented) GetScriptsSearch(w http.ResponseWriter, r *http.Request, params GetScriptsSearchParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Upload script
// (POST /scripts/upload)
func (_ Unimplemented) PostScriptsUpload(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete script
// (DELETE /scripts/{id})
func (_ Unimplemented) DeleteScriptsId(w http.ResponseWriter, r *http.Request, id ScriptId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get script by script id
// (GET /scripts/{id})
func (_ Unimplemented) GetScriptsId(w http.ResponseWriter, r *http.Request, id ScriptId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update script
// (PUT /scripts/{id})
func (_ Unimplemented) PutScriptsId(w http.ResponseWriter, r *http.Request, id ScriptId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Run script
// (POST /scripts/{id}/start)
func (_ Unimplemented) PostScriptsIdStart(w http.ResponseWriter, r *http.Request, id ScriptId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetJobs operation middleware
func (siw *ServerInterfaceWrapper) GetJobs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetJobsSearch operation middleware
func (siw *ServerInterfaceWrapper) GetJobsSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsSearchParams

	// ------------- Required query parameter "state" -------------

	if paramValue := r.URL.Query().Get("state"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "state"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "state", r.URL.Query(), &params.State)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "state", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobsSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetJobsIdResult operation middleware
func (siw *ServerInterfaceWrapper) GetJobsIdResult(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id JobId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobsIdResult(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetJobsIdResultDownload operation middleware
func (siw *ServerInterfaceWrapper) GetJobsIdResultDownload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id JobId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobsIdResultDownload(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScripts operation middleware
func (siw *ServerInterfaceWrapper) GetScripts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScripts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScripts operation middleware
func (siw *ServerInterfaceWrapper) PostScripts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScripts(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScriptsSearch operation middleware
func (siw *ServerInterfaceWrapper) GetScriptsSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetScriptsSearchParams

	// ------------- Required query parameter "script_name" -------------

	if paramValue := r.URL.Query().Get("script_name"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "script_name"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "script_name", r.URL.Query(), &params.ScriptName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "script_name", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScriptsSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScriptsUpload operation middleware
func (siw *ServerInterfaceWrapper) PostScriptsUpload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScriptsUpload(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteScriptsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteScriptsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ScriptId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteScriptsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetScriptsId operation middleware
func (siw *ServerInterfaceWrapper) GetScriptsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ScriptId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetScriptsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutScriptsId operation middleware
func (siw *ServerInterfaceWrapper) PutScriptsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ScriptId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutScriptsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostScriptsIdStart operation middleware
func (siw *ServerInterfaceWrapper) PostScriptsIdStart(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id ScriptId

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostScriptsIdStart(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/jobs", wrapper.GetJobs)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/jobs/search", wrapper.GetJobsSearch)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/jobs/{id}/result", wrapper.GetJobsIdResult)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/jobs/{id}/result/download", wrapper.GetJobsIdResultDownload)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/scripts", wrapper.GetScripts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/scripts", wrapper.PostScripts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/scripts/search", wrapper.GetScriptsSearch)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/scripts/upload", wrapper.PostScriptsUpload)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/scripts/{id}", wrapper.DeleteScriptsId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/scripts/{id}", wrapper.GetScriptsId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/scripts/{id}", wrapper.PutScriptsId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/scripts/{id}/start", wrapper.PostScriptsIdStart)
	})

	return r
}
