// Package scriptumapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package scriptumapi

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for Status.
const (
	Finished Status = "finished"
	Pending  Status = "pending"
	Running  Status = "running"
)

// Defines values for Visibility.
const (
	Global  Visibility = "global"
	Private Visibility = "private"
)

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// Field defines model for Field.
type Field struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
	Type        *string `json:"type,omitempty"`
	Unit        *string `json:"unit,omitempty"`
}

// File defines model for File.
type File struct {
	Content *openapi_types.File `json:"content,omitempty"`
	Name    *string             `json:"name,omitempty"`
}

// FilePath defines model for FilePath.
type FilePath = string

// Job defines model for Job.
type Job struct {
	CreatedAt    *time.Time `json:"created_at,omitempty"`
	Expected     *[]Field   `json:"expected,omitempty"`
	FinishedAt   *time.Time `json:"finished_at,omitempty"`
	In           *[]Value   `json:"in,omitempty"`
	JobId        *JobId     `json:"job_id,omitempty"`
	NeedToNotify *bool      `json:"need_to_notify,omitempty"`
	Path         *FilePath  `json:"path,omitempty"`
	ScriptId     *ScriptId  `json:"script_id,omitempty"`
	Status       *Status    `json:"status,omitempty"`
	UserId       *UserId    `json:"user_id,omitempty"`
}

// JobId defines model for JobId.
type JobId = int64

// Result defines model for Result.
type Result struct {
	Code         *int     `json:"code,omitempty"`
	ErrorMessage *string  `json:"error_message,omitempty"`
	Job          *Job     `json:"job,omitempty"`
	Out          *[]Value `json:"out,omitempty"`
}

// Script defines model for Script.
type Script struct {
	CreatedAt         *time.Time  `json:"created_at,omitempty"`
	InFields          *[]Field    `json:"in_fields,omitempty"`
	OutFields         *[]Field    `json:"out_fields,omitempty"`
	Owner             UserId      `json:"owner"`
	Path              *FilePath   `json:"path,omitempty"`
	ScriptDescription *string     `json:"script_description,omitempty"`
	ScriptId          *ScriptId   `json:"script_id,omitempty"`
	ScriptName        *string     `json:"script_name,omitempty"`
	Visibility        *Visibility `json:"visibility,omitempty"`
}

// ScriptId defines model for ScriptId.
type ScriptId = int64

// Status defines model for Status.
type Status string

// UserId defines model for UserId.
type UserId = int64

// Value defines model for Value.
type Value struct {
	Data *string `json:"data,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Visibility defines model for Visibility.
type Visibility string

// GetJobsSearchParams defines parameters for GetJobsSearch.
type GetJobsSearchParams struct {
	// State job state
	State Status `form:"state" json:"state"`
}

// PostScriptsJSONBody defines parameters for PostScripts.
type PostScriptsJSONBody struct {
	File   *File   `json:"file,omitempty"`
	Script *Script `json:"script,omitempty"`
}

// GetScriptsSearchParams defines parameters for GetScriptsSearch.
type GetScriptsSearchParams struct {
	// ScriptName substring of script name
	ScriptName string `form:"script_name" json:"script_name"`
}

// PostScriptsIdStartJSONBody defines parameters for PostScriptsIdStart.
type PostScriptsIdStartJSONBody struct {
	InParams      []Value `json:"in_params"`
	NotifyByEmail *bool   `json:"notify_by_email,omitempty"`
}

// PostScriptsJSONRequestBody defines body for PostScripts for application/json ContentType.
type PostScriptsJSONRequestBody PostScriptsJSONBody

// PutScriptsIdJSONRequestBody defines body for PutScriptsId for application/json ContentType.
type PutScriptsIdJSONRequestBody = Script

// PostScriptsIdStartJSONRequestBody defines body for PostScriptsIdStart for application/json ContentType.
type PostScriptsIdStartJSONRequestBody PostScriptsIdStartJSONBody
